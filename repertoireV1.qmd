---
title: "Untitled"
format: html
editor: visual
toc: true
toc-location: left
---

```{r setup}
#| echo: false
#| output: false
library(tidyverse)
library(knitr)
library(kableExtra)
library(DT)

data <- read.csv("../clean_data/thoa_MV11.csv") %>% 
  select(order(colnames(.)))
```

```{r}
#| echo: false
dictionaire <- function(df){
  
  variables_names <- names(df)
  
  
  dico3_df <- tibble(
    variable = variables_names,
    classe = map_chr(df, ~ class(.x)[1]),
    n_unique = map_int(df, ~ n_distinct(.x, na.rm = TRUE)),
    n_complete = map_int(df, ~ sum(!is.na(.x))),
    n_NA = map_int(df, ~ sum(is.na(.x))),
    data = map(df, ~ .x)
  ) %>% 
    
    mutate(
      afficher_min_max = case_when(
        str_detect(variable, "_date_") ~ TRUE,
        str_starts(variable, "id_centre") ~ TRUE,
        str_detect(variable, "dep") ~ TRUE,
        str_detect(variable, "_age") ~ TRUE,
        str_detect(variable, "_an") & !str_detect(variable, "id_anonymat") ~ TRUE,
        str_detect(variable, "_nais_") ~ TRUE,
        TRUE ~ FALSE
      )
    ) %>% 
    
    mutate(
      exemple_valeur = case_when(
        str_detect(variable, "commentaires")  | str_detect(variable, "_autre") ~ "Non affich√©",
        TRUE ~ map_chr(data, function(x) {
          val <- x[!is.na(x)]
          if (length(val) == 0) return("NA")
          paste0(unique(val)[1:min(3, length(unique(val)))], collapse = ", ")
          })
        )
    ) %>%
    
    mutate(
      valeurs_possibles = pmap_chr(list(variable, data, afficher_min_max), function(nom, colonne, afficher_min_max) {
        val <- unique(colonne[!is.na(colonne)])
        if (length(val) <= 27) {
          return(paste(val, collapse = ";"))
        } else if (afficher_min_max) {
          # Convertir les dates si besoin
          if (str_detect(nom, "_date_")) {
            suppressWarnings({
              val <- as.Date(val)
            })
          }
          if (all(is.na(val))) return("min: NA / max: NA")
          return(paste0(min(val, na.rm = TRUE), ":", max(val, na.rm = TRUE)))
        } else {
          return("Trop de valeurs")
        }
      })
    ) %>%
    # Retirer la colonne data (qui contenait les colonnes)
    select(variable, classe, n_unique, n_NA, n_complete, exemple_valeur, valeurs_possibles)
  
  return(dico3_df)
}

dico3_df <- dictionaire(data)

datatable(dico3_df, options = list(pageLength = 25), caption = "Dictionnaire interactif")
```
